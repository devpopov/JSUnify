// Generated by CoffeeScript 1.3.3
(function() {
  var dir, extern, fulltest, gettest, len, parsetest, runtests, str, unifyfailtest, unifytest;

  parsetest = function(obj) {
    return deepEqual(parse(obj).unparse(), obj, "parse");
  };

  unifytest = function(obj1, obj2) {
    return ok(unify(obj1, obj2), "unify");
  };

  unifyfailtest = function(obj1, obj2) {
    return ok(!unify(obj1, obj2), "unify fail");
  };

  gettest = function(tin, varValueDict) {
    var v, _results;
    _results = [];
    for (v in varValueDict) {
      if (varValueDict[v] instanceof Var) {
        _results.push(ok(tin.get(v) instanceof Var, "get(" + v + ") = Var()"));
      } else {
        _results.push(deepEqual(tin.get(v), varValueDict[v], "get(" + v + ") == " + (toJson(varValueDict[v]))));
      }
    }
    return _results;
  };

  fulltest = function(obj1, obj2, varValueDict1, varValueDict2) {
    parsetest(obj1);
    parsetest(obj2);
    obj1 = parse(obj1);
    obj2 = parse(obj2);
    unifytest(obj1, obj2);
    gettest(obj1, varValueDict1);
    return gettest(obj2, varValueDict2);
  };

  runtests = function() {
    var prop;
    for (prop in JSUnify) {
      window[prop] = JSUnify[prop];
    }
    for (prop in JSUnify.internal) {
      window[prop] = JSUnify.internal[prop];
    }
    module("full tests");
    test("empty obj {} -> {}", function() {
      return fulltest({}, {}, {}, {});
    });
    test("null test [null] -> [null]", function() {
      return fulltest([null], [null], {}, {});
    });
    test("variable equal [X] -> [1]", function() {
      return fulltest([Var("a")], [1], {
        a: 1
      }, {});
    });
    test("variable equal [X,X] -> [1,1]", function() {
      return fulltest([Var("a"), Var("a")], [1, 1], {
        a: 1
      }, {});
    });
    test("variable equal [[1,2,3]] -> [y]", function() {
      return fulltest([[1, 2, 3]], [Var("y")], {}, {
        y: [1, 2, 3]
      });
    });
    test("variable equal [[1,2,x],x] -> [y,3]", function() {
      return fulltest([[1, 2, Var("x")], Var("x")], [Var("y"), 3], {
        x: 3
      }, {
        y: [1, 2, 3]
      });
    });
    test("unbound variable [y]->[x]", function() {
      return fulltest([Var("y")], [Var("x")], {
        y: Var("x")
      }, {
        x: Var("x")
      });
    });
    test("variable equal [1,X,X] -> [Z,Z,1]", function() {
      return fulltest([1, Var("X"), Var("X")], [Var("Z"), Var("Z"), 1], {
        X: 1
      }, {
        Z: 1
      });
    });
    module("unify fail tests");
    test("variable equal [X,X] -> [1,2]", function() {
      return unifyfailtest([Var("a"), Var("a")], [1, 2]);
    });
    test("variable unequal [1,3,2] -> [Y,Y,2]", function() {
      return unifyfailtest([1, 3, 2], [Var("y"), Var("y"), 2]);
    });
    test("variable unequal [1,X,X] -> [Z,Z,3]", function() {
      return unifyfailtest([1, Var("X"), Var("X")], [Var("Z"), Var("Z"), 3]);
    });
    module("misc");
    test("simple black box unify test", function() {
      return ok(unify({
        a: [1, 2, 3]
      }, {
        a: [1, Var("b"), 3]
      }));
    });
    module("unify");
    test("variable equal [X,2,X] -> [1,2,1]", function() {
      var tins;
      tins = unify([Var("x"), 2, Var("x")], [1, 2, 1]);
      ok(tins);
      return deepEqual(tins[0].get_all(), {
        "x": 1
      });
    });
    module("extract");
    test("simple variable extraction test", function() {
      var tins;
      tins = unify({
        a: [1, 2, 3]
      }, {
        a: [1, Var("b"), 3]
      });
      return ok(tins[1].get("b") === 2);
    });
    test("extract all variables test", function() {
      var tins;
      tins = unify({
        a: [1, 2, 3]
      }, {
        a: [1, Var("b"), 3]
      });
      return deepEqual(tins[1].get_all(), {
        "b": 2
      });
    });
    module("hidden variables");
    test("create hidden variable", function() {
      return ok((Var("_")).isHiddenVar());
    });
    test("simple hidden variable [_,X] -> [1,2]", function() {
      return fulltest([Var("_"), Var("x")], [1, 2], {
        "x": 2
      }, {});
    });
    test("multiple hidden variables [_,_,X] -> [1,2,3]", function() {
      return fulltest([Var("_"), Var("_"), Var("x")], [1, 2, 3], {
        "x": 3
      }, {});
    });
    test("[[1,_,3],[1,2,3]] -> [X,X]", function() {
      return fulltest([[1, Var("_"), 3], [1, 2, 3]], [Var("x"), Var("x")], {}, {
        "x": [1, 2, 3]
      });
    });
    module("rollback");
    return test("rollback successful unification", function() {
      var changes, cobj1, cobj2, obj1, obj2;
      obj1 = [1, 2, 3];
      obj2 = [Var("A"), Var("B"), 3];
      parsetest(obj1);
      parsetest(obj2);
      obj1 = parse(obj1);
      obj2 = parse(obj2);
      cobj1 = eval(obj1.toString());
      cobj2 = eval(obj2.toString());
      changes = [];
      ok(unify(obj1, obj2, changes), "unify");
      rollback(changes);
      ok(obj1.toString() === cobj1.toString());
      return ok(obj2.toString() === cobj2.toString());
    });
  };

  dir = function(o) {
    return console.dir(o);
  };

  len = function(o) {
    return o.length;
  };

  str = function(o) {
    if (typeof o === "undefined") {
      return "undefined";
    } else if (o === null) {
      return "null";
    } else {
      return o.toString();
    }
  };

  extern = function(name, o) {
    return window[name] = o;
  };

  extern("RunJSUnifyUnitTests", runtests);

  extern("str", str);

  extern("len", len);

  extern("dir", dir);

}).call(this);
